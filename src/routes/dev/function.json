{
    "methods": [{
            "line": 64,
            "method_id": "DataAugmentation.apply!_1",
            "signature": "apply!(buf, buffered::DataAugmentation.Buffered, items::T; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/buffered.jl"
        },
        {
            "line": 94,
            "method_id": "DataAugmentation.apply!_2",
            "signature": "apply!(buf, bufferedt::DataAugmentation.BufferedThreadsafe, items; kwargs...)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/buffered.jl"
        },
        {
            "line": 34,
            "method_id": "DataAugmentation.apply!_3",
            "signature": "apply!(bufs, oneof::DataAugmentation.OneOf, item::DataAugmentation.Item; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/oneof.jl"
        },
        {
            "line": 31,
            "method_id": "DataAugmentation.apply!_4",
            "signature": "apply!(buf, ::DataAugmentation.ToEltype, item::DataAugmentation.AbstractArrayItem; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/preprocessing.jl"
        },
        {
            "line": 74,
            "method_id": "DataAugmentation.apply!_5",
            "signature": "apply!(buf, tfm::DataAugmentation.Normalize, item::DataAugmentation.ArrayItem; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/preprocessing.jl"
        },
        {
            "line": 163,
            "method_id": "DataAugmentation.apply!_6",
            "signature": "apply!(buf, ::DataAugmentation.ImageToTensor, image::DataAugmentation.Image; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/preprocessing.jl"
        },
        {
            "line": 249,
            "method_id": "DataAugmentation.apply!_7",
            "signature": "apply!(buf, tfm::DataAugmentation.OneHot{T}, item::DataAugmentation.MaskMulti; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/preprocessing.jl"
        },
        {
            "line": 38,
            "method_id": "DataAugmentation.apply!_8",
            "signature": "apply!(buf, tfm::DataAugmentation.AdjustBrightness, item::DataAugmentation.Image; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/colortransforms.jl"
        },
        {
            "line": 99,
            "method_id": "DataAugmentation.apply!_9",
            "signature": "apply!(buf, tfm::DataAugmentation.AdjustContrast, item::DataAugmentation.Image; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/colortransforms.jl"
        },
        {
            "line": 33,
            "method_id": "DataAugmentation.apply!_10",
            "signature": "apply!(bufs::Union{Tuple, AbstractVector{T} where T}, tfm::DataAugmentation.Transform, items::Union{Tuple, AbstractVector{T} where T}; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/buffered.jl"
        },
        {
            "line": 37,
            "method_id": "DataAugmentation.apply!_11",
            "signature": "apply!(bufitem::I, tfm::DataAugmentation.MapElem, item::I; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/items/arrayitem.jl"
        },
        {
            "line": 231,
            "method_id": "DataAugmentation.apply!_12",
            "signature": "apply!(buf::DataAugmentation.AbstractItem, ::DataAugmentation.PinOrigin, item::Union{DataAugmentation.Image, DataAugmentation.MaskBinary, DataAugmentation.MaskMulti}; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/projective/affine.jl"
        },
        {
            "line": 112,
            "method_id": "DataAugmentation.apply!_13",
            "signature": "apply!(bufitem::DataAugmentation.AbstractItem, tfm::DataAugmentation.ProjectiveTransform, item::DataAugmentation.AbstractItem; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/projective/base.jl"
        },
        {
            "line": 54,
            "method_id": "DataAugmentation.apply!_14",
            "signature": "apply!(buffers::Vector{T} where T, pipeline::DataAugmentation.Sequence, items::DataAugmentation.Item; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/sequence.jl"
        },
        {
            "line": 25,
            "method_id": "DataAugmentation.apply!_15",
            "signature": "apply!(buf, tfm::DataAugmentation.Transform, items; randstate)",
            "symbol_id": "DataAugmentation.apply!",
            "file": "/home/lorenz/.julia/dev/DataAugmentation/src/buffered.jl"
        }
    ],
    "documentation": {
        "tag": "body",
        "attributes": {},
        "children": [{
                "tag": "pre",
                "attributes": {
                    "lang": ""
                },
                "children": [{
                    "tag": "code",
                    "attributes": {},
                    "children": [{
                        "mimes": {
                            "text/plain": "apply!(buffer::I, tfm, item::I)\n"
                        }
                    }]
                }]
            },
            {
                "tag": "p",
                "attributes": {},
                "children": [{
                        "mimes": {
                            "text/plain": "Applies "
                        }
                    },
                    {
                        "tag": "code",
                        "attributes": {},
                        "children": [{
                            "mimes": {
                                "text/plain": "tfm"
                            }
                        }]
                    },
                    {
                        "mimes": {
                            "text/plain": " to "
                        }
                    },
                    {
                        "tag": "code",
                        "attributes": {},
                        "children": [{
                            "mimes": {
                                "text/plain": "item"
                            }
                        }]
                    },
                    {
                        "mimes": {
                            "text/plain": ", mutating the preallocated "
                        }
                    },
                    {
                        "tag": "code",
                        "attributes": {},
                        "children": [{
                            "mimes": {
                                "text/plain": "buffer"
                            }
                        }]
                    },
                    {
                        "mimes": {
                            "text/plain": "."
                        }
                    }
                ]
            },
            {
                "tag": "p",
                "attributes": {},
                "children": [{
                        "tag": "code",
                        "attributes": {},
                        "children": [{
                            "mimes": {
                                "text/plain": "buffer"
                            }
                        }]
                    },
                    {
                        "mimes": {
                            "text/plain": " can be obtained with "
                        }
                    },
                    {
                        "tag": "code",
                        "attributes": {},
                        "children": [{
                            "mimes": {
                                "text/plain": "buffer = makebuffer(tfm, item)"
                            }
                        }]
                    }
                ]
            },
            {
                "tag": "pre",
                "attributes": {
                    "lang": ""
                },
                "children": [{
                    "tag": "code",
                    "attributes": {},
                    "children": [{
                        "mimes": {
                            "text/plain": "apply!(buffer, tfm::Transform, item::I; randstate) = apply(tfm, item; randstate)\n"
                        }
                    }]
                }]
            },
            {
                "tag": "p",
                "attributes": {},
                "children": [{
                        "mimes": {
                            "text/plain": "Default to "
                        }
                    },
                    {
                        "tag": "code",
                        "attributes": {},
                        "children": [{
                            "mimes": {
                                "text/plain": "apply(tfm, item)"
                            }
                        }]
                    },
                    {
                        "mimes": {
                            "text/plain": " (non"
                        }
                    },
                    {
                        "mimes": {
                            "text/plain": "-"
                        }
                    },
                    {
                        "mimes": {
                            "text/plain": "mutating version)"
                        }
                    },
                    {
                        "mimes": {
                            "text/plain": "."
                        }
                    }
                ]
            }
        ]
    },
    "name": "apply!",
    "symbol_id": "DataAugmentation.apply!",
    "public": true,
    "module_id": "DataAugmentation"
}