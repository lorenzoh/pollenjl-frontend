{"attributes":{"path":"/home/lorenz/.julia/dev/DataLoaders/src/DataLoaders.jl"},"tag":"sourcefile","children":[{"mimes":{"text/plain":"module DataLoaders\n\nusing MLDataPattern\nusing ThreadPools\nusing LearnBase\nusing Parameters\n\n\ninclude(\"./ringbuffer.jl\")\ninclude(\"./workerpool.jl\")\ninclude(\"./collate.jl\")\ninclude(\"./batchview.jl\")\ninclude(\"./loaders.jl\")\n\n\n\"\"\"\n    DataLoader(\n        data, batchsize = 1;\n        partial = true,\n        collate = true,\n        buffered = collate,\n        parallel = Threads.nthreads() > 1,\n        useprimary = false,\n    )\n\nUtility for creating iterators of container `data` with a familiar interface\nfor PyTorch users.\n\n## Arguments\n\n- `data`: A data container supporting the `LearnBase` data access pattern\n- `batchsize = 1`: Number of samples to batch together. Disable batching\n  by setting to `nothing`.\n\n## Keyword arguments\n\n- `partial::Bool = true`: Whether to include the last batch when `nobs(dataset)` is\n  not divisible by `batchsize`. `true` ensures all batches have the same size, but\n  some samples might be dropped.\n- `buffered::Bool = collate`: If `buffered` is `true`, loads data inplace\n  using `getobs!`. See [Data containers](../docs/datacontainers.md) for details\n  on buffered loading.\n- `parallel::Bool = Threads.nthreads() > 1)`: Whether to load data\n  in parallel, keeping the primary thread is. Default is `true` if\n  more than one thread is available.\n- `useprimary::Bool = false`: If `false`, keep the main thread free when loading\n  data in parallel. Is ignored if `parallel` is `false`.\n\n## Examples\n\n`DataLoader(data, 16) === `[`BufferGetObsParallel`](#)`(`[`batchviewcollated`](#)`(data, 16))`\n\n\"\"\"\nfunction DataLoader(\n        data,\n        batchsize = 1;\n        collate = !isnothing(batchsize),\n        buffered = collate,\n        partial = true,\n        useprimary = Threads.nthreads() == 1,\n    )\n\n    Threads.nthreads() > 1 || useprimary || error(\n        \"Julia is running with one thread only, either pass `useprimary = true` or \" *\n        \"start Julia with multiple threads by passing \" *\n        \"the `-t n` option or setting the `JULIA_NUM_THREADS` \" *\n        \"environment variable before starting Julia.\")\n\n    batchwrapper = if isnothing(batchsize)\n        identity\n    elseif collate\n        data -> batchviewcollated(data, batchsize; partial = partial)\n    else\n        partial == false || error(\"Partial batches not yet supported for non-collated batches\")\n        data -> batchview(data, size = batchsize)\n    end\n\n    loadwrapper = data -> eachobsparallel(data; useprimary = useprimary, buffered = buffered)\n\n    return loadwrapper(batchwrapper(data))\nend\n\n\nexport DataLoader, eachobsparallel, batchviewcollated\n\nend  # module\n"}}]}